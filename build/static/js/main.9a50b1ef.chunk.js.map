{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","keys.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["userAccessToken","SearchBar","props","state","searchTerm","handleSearchInput","bind","search","handleEnter","event","this","setState","target","value","console","log","onSearch","key","preventDefault","className","placeholder","onChange","onKeyPress","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","trackName","name","trackArtist","artist","trackAlbum","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleRename","onRename","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","tokenMatch","window","location","href","match","expiryMatch","expiresIn","Number","setTimeout","history","pushState","accessURL","searchSpotify","token","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","listName","trackURIArray","length","userId","method","body","JSON","stringify","newPlaylistId","uris","App","playlistName","renamePlaylist","currentTracks","find","savedTrack","push","filter","current","newName","trackURIs","userInput","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a50b1ef.chunk.js","sourcesContent":["import spotifyClientID from \"../keys\";\nconst clientID = spotifyClientID;\nconst redirectURI = \"https://jukeboxd.surge.sh/\";\nlet userAccessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (userAccessToken) {\n      return userAccessToken;\n    }\n\n    //else parse a token string out of the URL using .match and a regEx:\n    const tokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    //likewise grab expiry info from URL:\n    const expiryMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (tokenMatch && expiryMatch) {\n      userAccessToken = tokenMatch[1];\n      const expiresIn = Number(expiryMatch[1]);\n      //clear vars && grab new token on expiry:\n      window.setTimeout(() => (userAccessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      console.log(\"valid access token returned\");\n      return userAccessToken;\n    } else {\n      const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = accessURL;\n    }\n  },\n\n  searchSpotify(searchTerm) {\n    const token = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        //return an empty array if no tracks in the json response:\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        //else concoct this object:\n        return jsonResponse.tracks.items.map((track) => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n        }));\n      });\n  },\n\n  savePlaylist(listName, trackURIArray) {\n    //breakout if args are empty:\n    if (!listName || !trackURIArray.length) {\n      console.log(\"empty\");\n      return;\n    }\n\n    //otherwise get the user's username via authorized request:\n    const token = this.getAccessToken();\n    const headers = { Authorization: `Bearer ${token}` };\n    let userId;\n\n    return fetch(`https://api.spotify.com/v1/me`, { headers: headers })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        userId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n          headers: headers,\n          method: \"POST\",\n          body: JSON.stringify({ name: listName }),\n        })\n          .then((response) => response.json())\n          .then((jsonResponse) => {\n            const newPlaylistId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${newPlaylistId}/tracks`, {\n              headers: headers,\n              method: \"POST\",\n              body: JSON.stringify({ uris: trackURIArray }),\n            });\n          });\n      });\n  },\n};\n\nexport default Spotify;\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nexport class SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: \"\",\n    };\n    this.handleSearchInput = this.handleSearchInput.bind(this);\n    this.search = this.search.bind(this);\n    this.handleEnter = this.handleEnter.bind(this);\n  }\n\n  handleSearchInput(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  search() {\n    console.log(\"clicked\");\n    this.props.onSearch(this.state.searchTerm);\n  }\n\n  handleEnter(event) {\n    if (event && event.key === \"Enter\") {\n      event.preventDefault();\n      console.log(\"Enter pressed\");\n      this.search();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input placeholder=\"Search by Song, Artist or Album\" onChange={this.handleSearchInput} onKeyPress={this.handleEnter} />\n        <button className=\"SearchButton\" onClick={this.search}>\n          Ayyyy\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./Track.css\";\n\nexport class Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  renderAction() {\n    if (this.props.isRemoval) {\n      return (\n        <button className=\"Track-action\" onClick={this.removeTrack}>\n          -\n        </button>\n      );\n    } else {\n      return (\n        <button className=\"Track-action\" onClick={this.addTrack}>\n          +\n        </button>\n      );\n    }\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    let trackName = this.props.track.name;\n    let trackArtist = this.props.track.artist;\n    let trackAlbum = this.props.track.album;\n\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{trackName}</h3>\n          <p>\n            {trackArtist} | {trackAlbum}\n          </p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Track } from \"../Track/Track.js\";\nimport \"./TrackList.css\";\n\n//this now has search results as a prop called 'tracks'\nexport class TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {this.props.tracks.map((track) => {\n          //mapping the results to an array and passing to the Track component as props\n          return <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />;\n        })}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./SearchResults.css\";\nimport { TrackList } from \"../TrackList/TrackList.js\";\n\nexport class SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { TrackList } from \"../TrackList/TrackList.js\";\nimport \"./Playlist.css\";\n\nexport class Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleRename = this.handleRename.bind(this);\n  }\n\n  handleRename(event) {\n    this.props.onRename(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input onChange={this.handleRename} defaultValue={\"New Playlist\"} />\n        <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>\n          Save this playlist\n        </button>\n      </div>\n    );\n  }\n}\n","const spotifyClientID = \"123e19beb653407bb4b7ca066b254110\";\nexport default spotifyClientID;\n","import React from \"react\";\nimport \"./App.css\";\nimport { SearchBar } from \"../SearchBar/SearchBar.js\";\nimport { SearchResults } from \"../SearchResults/SearchResults.js\";\nimport { Playlist } from \"../Playlist/Playlist.js\";\nimport Spotify from \"../../util/Spotify\";\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"playlist1\",\n      playlistTracks: [],\n    };\n    //'this' bindings:\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.renamePlaylist = this.renamePlaylist.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let currentTracks = this.state.playlistTracks;\n    if (currentTracks.find((savedTrack) => savedTrack.id === track.id)) {\n      return; //ie. end this method if the id of the playlist track is already saved\n    }\n    //otherwise\n    currentTracks.push(track);\n    this.setState({ playlistTracks: currentTracks });\n  }\n\n  removeTrack(track) {\n    let currentTracks = this.state.playlistTracks;\n    currentTracks = currentTracks.filter((current) => current.id !== track.id);\n    this.setState({ playlistTracks: currentTracks });\n  }\n\n  renamePlaylist(newName) {\n    this.setState({ playlistName: newName });\n  }\n\n  //spotify API interaction:\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map((track) => {\n      return track.uri;\n    });\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({ playlistName: \"New (Untitled)\", playlistTracks: [] });\n    });\n  }\n\n  search(userInput) {\n    Spotify.searchSpotify(userInput).then((searchResults) => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Jukeboxd</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks} onRemove={this.removeTrack} onRename={this.renamePlaylist} onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App/App.js\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}